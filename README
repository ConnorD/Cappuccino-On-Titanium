As of right now, Titanium and Cappuccino communication is available through [TICapp evalTitanium:(CPString)command]. The CPString is just any valid javascript that will be evaluated within the Titanium javascript file(s). To use this method you'll need to include TICapp.j like this: @import <TICapp/TICapp.j>

In the long run, I'm looking to almost model the 'real' iPhone SDK in terms of the class structure, and the workflow. Objective-J and its classical inheritance system is great for this, as opposed to javascript's non-classical system. As of yet I've only created a few classes that will eventually define the model of the framework. For example, when the framework is almost complete you will be able to have your "AppController.j" file act as if the AppDelegate file in the iPhone SDK, and from there the rest of your classes will be "UIViewController" classes, as defined in the "Cappuccino-Extensions" Github repository.

If you have any ideas, or want to contribute to this project, please do so ;).

--
Project Objectives:
* Structure and Inheritance (OOP)
  - designed after Apple's Cocoa Touch framework
  - nice Objective-J code, very similar to Objective-C in Cocoa
* User Interface (through Titanium Mobile - http://appcelerator.com)
  - the iPhone SDK-similar API will allow iPhone devs to create cross-platform apps easily and familiarly
* Native Device Functions/Hardware (Titanium Mobile)
  - provide a Objective-J abstraction layer on top of the Ti APIs, in a way that is similar to the iPhone SDK
    * for example: CoreLocation APIs
--
Class Structures (as of right now):
* TICapp - lowest level Titanium and Cappuccino communication system
  * TIAppDelegate - class that the AppController.j file will extend. Some basic UI-setup abstractions performed in here.
  * TIView - the top-level view system
    * TILabel - example of a class extending TIView
    * [other UI elements]
To be continued...